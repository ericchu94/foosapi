extend type Query {
    matches: [Match!]!
    match(id: ID!): Match
}

type Match {
    id: ID!
    name: String!
}

extend type Mutation {
    createMatch(input: CreateMatchInput!): CreateMatchPayload!
    deleteMatch(input: DeleteMatchInput!): DeleteMatchPayload!
    deleteMatches: DeleteMatchesPayload!
    updateMatch(input: UpdateMatchInput!): UpdateMatchPayload!
}

input CreateMatchInput {
    name: String!
}

type CreateMatchPayload {
    error: CreateMatchError
    result: Match
}

type CreateMatchError {
    code: CreateMatchErrorCode!
    message: String!
}

enum CreateMatchErrorCode {
    GENERIC
    DUPLICATE
}

input DeleteMatchInput {
    id: ID!
}

type DeleteMatchPayload {
    error: DeleteMatchError
    result: Match
}

type DeleteMatchError {
    code: DeleteMatchErrorCode!
    message: String!
}

enum DeleteMatchErrorCode {
    GENERIC
    NOT_FOUND
}

type DeleteMatchesPayload {
    error: DeleteMatchesError
    result: Int
}

type DeleteMatchesError {
    code: DeleteMatchesErrorCode!
    message: String!
}

enum DeleteMatchesErrorCode {
    GENERIC
}

input UpdateMatchInput {
    id: ID!
    fields: UpdateMatchFields!
}

input UpdateMatchFields {
    name: String
}

type UpdateMatchPayload {
    error: UpdateMatchError
    result: Match
}

type UpdateMatchError {
    code: UpdateMatchErrorCode!
    message: String!
}

enum UpdateMatchErrorCode {
    GENERIC
    NOT_FOUND
}

extend type Subscription {
    match: Match
}
