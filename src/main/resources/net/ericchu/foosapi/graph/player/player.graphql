extend type Query {
    players: [Player!]!
}

type Player {
    id: ID!
    name: String!
}

extend type Mutation {
    createPlayer(input: CreatePlayerInput!): CreatePlayerPayload!
    deletePlayer(input: DeletePlayerInput!): DeletePlayerPayload!
    addPlayer(input: AddPlayerInput!): AddPlayerPayload!
    addPlayerMatch(input: AddPlayerMatchInput!): AddPlayerMatchPayload!
}

input CreatePlayerInput {
    name: String!
}

type CreatePlayerPayload {
    error: CreatePlayerError
    result: Player
}

type CreatePlayerError {
    code: CreatePlayerErrorCode!
    message: String!
}

enum CreatePlayerErrorCode {
    GENERIC
}

input AddPlayerInput {
    playerId: ID!
    sideId: ID!
}

type AddPlayerPayload {
    error: AddPlayerError
    result: Boolean
}

type AddPlayerError {
    code: AddPlayerErrorCode!
    message: String!
}

enum AddPlayerErrorCode {
    GENERIC
}

extend type Side {
    players: [Player!]!
}

extend type Match {
    top: [Player!]!
    bottom: [Player!]!
}

input AddPlayerMatchInput {
    playerId: ID!
    matchId: ID!
    spot: Spot!
}

enum Spot {
    TOP
    BOTTOM
}

type AddPlayerMatchPayload {
    error: AddPlayerMatchError
    result: Boolean
}

type AddPlayerMatchError {
    code: AddPlayerMatchErrorCode!
    message: String!
}

enum AddPlayerMatchErrorCode {
    GENERIC
}

input DeletePlayerInput {
    playerId: ID!
}

type DeletePlayerPayload {
    error: DeletePlayerError
    result: Player
}

type DeletePlayerError {
    code: DeletePlayerErrorCode!
    message: String!
}

enum DeletePlayerErrorCode {
    GENERIC
}